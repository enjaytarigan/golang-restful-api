// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import entity "brodo-demo/entity"
import mock "github.com/stretchr/testify/mock"

// CategoryRepository is an autogenerated mock type for the CategoryRepository type
type CategoryRepository struct {
	mock.Mock
}

// FindById provides a mock function with given fields: Id
func (_m *CategoryRepository) FindById(Id int) (entity.Category, error) {
	ret := _m.Called(Id)

	var r0 entity.Category
	if rf, ok := ret.Get(0).(func(int) entity.Category); ok {
		r0 = rf(Id)
	} else {
		r0 = ret.Get(0).(entity.Category)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(Id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertOne provides a mock function with given fields: category
func (_m *CategoryRepository) InsertOne(category entity.Category) (*entity.Category, error) {
	ret := _m.Called(category)

	var r0 *entity.Category
	if rf, ok := ret.Get(0).(func(entity.Category) *entity.Category); ok {
		r0 = rf(category)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Category)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(entity.Category) error); ok {
		r1 = rf(category)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateById provides a mock function with given fields: category
func (_m *CategoryRepository) UpdateById(category entity.Category) (*entity.Category, error) {
	ret := _m.Called(category)

	var r0 *entity.Category
	if rf, ok := ret.Get(0).(func(entity.Category) *entity.Category); ok {
		r0 = rf(category)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Category)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(entity.Category) error); ok {
		r1 = rf(category)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
